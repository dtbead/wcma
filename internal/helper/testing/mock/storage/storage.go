// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=storage/storage.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	io "io"
	reflect "reflect"

	entities "github.com/dtbead/wc-maps-archive/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileRepository) DeleteFile(ctx context.Context, file_id entities.FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, file_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileRepositoryMockRecorder) DeleteFile(ctx, file_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileRepository)(nil).DeleteFile), ctx, file_id)
}

// GetFile mocks base method.
func (m *MockFileRepository) GetFile(ctx context.Context, file_id entities.FileID) (*entities.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, file_id)
	ret0, _ := ret[0].(*entities.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileRepositoryMockRecorder) GetFile(ctx, file_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileRepository)(nil).GetFile), ctx, file_id)
}

// NewFile mocks base method.
func (m *MockFileRepository) NewFile(ctx context.Context, file io.Reader, extension string) (entities.FileID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", ctx, file, extension)
	ret0, _ := ret[0].(entities.FileID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFile indicates an expected call of NewFile.
func (mr *MockFileRepositoryMockRecorder) NewFile(ctx, file, extension any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockFileRepository)(nil).NewFile), ctx, file, extension)
}

// NewTempFile mocks base method.
func (m *MockFileRepository) NewTempFile(ctx context.Context) (io.ReadWriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTempFile", ctx)
	ret0, _ := ret[0].(io.ReadWriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTempFile indicates an expected call of NewTempFile.
func (mr *MockFileRepositoryMockRecorder) NewTempFile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTempFile", reflect.TypeOf((*MockFileRepository)(nil).NewTempFile), ctx)
}

// MockProjectRepository is a mock of ProjectRepository interface.
type MockProjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepositoryMockRecorder
	isgomock struct{}
}

// MockProjectRepositoryMockRecorder is the mock recorder for MockProjectRepository.
type MockProjectRepositoryMockRecorder struct {
	mock *MockProjectRepository
}

// NewMockProjectRepository creates a new mock instance.
func NewMockProjectRepository(ctrl *gomock.Controller) *MockProjectRepository {
	mock := &MockProjectRepository{ctrl: ctrl}
	mock.recorder = &MockProjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepository) EXPECT() *MockProjectRepositoryMockRecorder {
	return m.recorder
}

// AssignProjectFile mocks base method.
func (m *MockProjectRepository) AssignProjectFile(ctx context.Context, uuid entities.ProjectUUID, file_id entities.FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignProjectFile", ctx, uuid, file_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignProjectFile indicates an expected call of AssignProjectFile.
func (mr *MockProjectRepositoryMockRecorder) AssignProjectFile(ctx, uuid, file_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignProjectFile", reflect.TypeOf((*MockProjectRepository)(nil).AssignProjectFile), ctx, uuid, file_id)
}

// DeleteProject mocks base method.
func (m *MockProjectRepository) DeleteProject(ctx context.Context, uuid entities.ProjectUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectRepositoryMockRecorder) DeleteProject(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectRepository)(nil).DeleteProject), ctx, uuid)
}

// GetProject mocks base method.
func (m *MockProjectRepository) GetProject(ctx context.Context, uuid entities.ProjectUUID) (*entities.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, uuid)
	ret0, _ := ret[0].(*entities.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockProjectRepositoryMockRecorder) GetProject(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectRepository)(nil).GetProject), ctx, uuid)
}

// GetProjectVideos mocks base method.
func (m *MockProjectRepository) GetProjectVideos(ctx context.Context, uuid entities.ProjectUUID) ([]entities.FileID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectVideos", ctx, uuid)
	ret0, _ := ret[0].([]entities.FileID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectVideos indicates an expected call of GetProjectVideos.
func (mr *MockProjectRepositoryMockRecorder) GetProjectVideos(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectVideos", reflect.TypeOf((*MockProjectRepository)(nil).GetProjectVideos), ctx, uuid)
}

// NewProject mocks base method.
func (m *MockProjectRepository) NewProject(ctx context.Context, project *entities.Project) (entities.ProjectUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProject", ctx, project)
	ret0, _ := ret[0].(entities.ProjectUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProject indicates an expected call of NewProject.
func (mr *MockProjectRepositoryMockRecorder) NewProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProject", reflect.TypeOf((*MockProjectRepository)(nil).NewProject), ctx, project)
}

// UnassignProjectVideo mocks base method.
func (m *MockProjectRepository) UnassignProjectVideo(ctx context.Context, uuid entities.ProjectUUID, file_id entities.FileID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignProjectVideo", ctx, uuid, file_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignProjectVideo indicates an expected call of UnassignProjectVideo.
func (mr *MockProjectRepositoryMockRecorder) UnassignProjectVideo(ctx, uuid, file_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignProjectVideo", reflect.TypeOf((*MockProjectRepository)(nil).UnassignProjectVideo), ctx, uuid, file_id)
}

// MockYoutubeRepository is a mock of YoutubeRepository interface.
type MockYoutubeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockYoutubeRepositoryMockRecorder
	isgomock struct{}
}

// MockYoutubeRepositoryMockRecorder is the mock recorder for MockYoutubeRepository.
type MockYoutubeRepositoryMockRecorder struct {
	mock *MockYoutubeRepository
}

// NewMockYoutubeRepository creates a new mock instance.
func NewMockYoutubeRepository(ctrl *gomock.Controller) *MockYoutubeRepository {
	mock := &MockYoutubeRepository{ctrl: ctrl}
	mock.recorder = &MockYoutubeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYoutubeRepository) EXPECT() *MockYoutubeRepositoryMockRecorder {
	return m.recorder
}

// GetChannelVideos mocks base method.
func (m *MockYoutubeRepository) GetChannelVideos(ctx context.Context, channel_id entities.YoutubeChannelID) ([]entities.YoutubeVideoID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelVideos", ctx, channel_id)
	ret0, _ := ret[0].([]entities.YoutubeVideoID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelVideos indicates an expected call of GetChannelVideos.
func (mr *MockYoutubeRepositoryMockRecorder) GetChannelVideos(ctx, channel_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelVideos", reflect.TypeOf((*MockYoutubeRepository)(nil).GetChannelVideos), ctx, channel_id)
}

// GetDescription mocks base method.
func (m *MockYoutubeRepository) GetDescription(ctx context.Context, youtube_id entities.YoutubeVideoID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription", ctx, youtube_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockYoutubeRepositoryMockRecorder) GetDescription(ctx, youtube_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockYoutubeRepository)(nil).GetDescription), ctx, youtube_id)
}

// GetTitle mocks base method.
func (m *MockYoutubeRepository) GetTitle(ctx context.Context, youtube_id entities.YoutubeVideoID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle", ctx, youtube_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTitle indicates an expected call of GetTitle.
func (mr *MockYoutubeRepositoryMockRecorder) GetTitle(ctx, youtube_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockYoutubeRepository)(nil).GetTitle), ctx, youtube_id)
}

// GetYoutube mocks base method.
func (m *MockYoutubeRepository) GetYoutube(ctx context.Context, youtube_id entities.YoutubeVideoID) (*entities.Youtube, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYoutube", ctx, youtube_id)
	ret0, _ := ret[0].(*entities.Youtube)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYoutube indicates an expected call of GetYoutube.
func (mr *MockYoutubeRepositoryMockRecorder) GetYoutube(ctx, youtube_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYoutube", reflect.TypeOf((*MockYoutubeRepository)(nil).GetYoutube), ctx, youtube_id)
}

// GetYoutubeFileIDs mocks base method.
func (m *MockYoutubeRepository) GetYoutubeFileIDs(ctx context.Context, youtube_id entities.YoutubeVideoID) ([]entities.FileID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYoutubeFileIDs", ctx, youtube_id)
	ret0, _ := ret[0].([]entities.FileID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYoutubeFileIDs indicates an expected call of GetYoutubeFileIDs.
func (mr *MockYoutubeRepositoryMockRecorder) GetYoutubeFileIDs(ctx, youtube_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYoutubeFileIDs", reflect.TypeOf((*MockYoutubeRepository)(nil).GetYoutubeFileIDs), ctx, youtube_id)
}

// GetYoutubeVideo mocks base method.
func (m *MockYoutubeRepository) GetYoutubeVideo(ctx context.Context, youtube_id entities.YoutubeVideoID) (*entities.YoutubeVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYoutubeVideo", ctx, youtube_id)
	ret0, _ := ret[0].(*entities.YoutubeVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYoutubeVideo indicates an expected call of GetYoutubeVideo.
func (mr *MockYoutubeRepositoryMockRecorder) GetYoutubeVideo(ctx, youtube_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYoutubeVideo", reflect.TypeOf((*MockYoutubeRepository)(nil).GetYoutubeVideo), ctx, youtube_id)
}

// NewYoutube mocks base method.
func (m *MockYoutubeRepository) NewYoutube(ctx context.Context, file_id entities.FileID, youtube *entities.Youtube) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewYoutube", ctx, file_id, youtube)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewYoutube indicates an expected call of NewYoutube.
func (mr *MockYoutubeRepositoryMockRecorder) NewYoutube(ctx, file_id, youtube any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewYoutube", reflect.TypeOf((*MockYoutubeRepository)(nil).NewYoutube), ctx, file_id, youtube)
}

// NewYoutubeVideo mocks base method.
func (m *MockYoutubeRepository) NewYoutubeVideo(ctx context.Context, file_id entities.FileID, youtube_video *entities.YoutubeVideo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewYoutubeVideo", ctx, file_id, youtube_video)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewYoutubeVideo indicates an expected call of NewYoutubeVideo.
func (mr *MockYoutubeRepositoryMockRecorder) NewYoutubeVideo(ctx, file_id, youtube_video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewYoutubeVideo", reflect.TypeOf((*MockYoutubeRepository)(nil).NewYoutubeVideo), ctx, file_id, youtube_video)
}

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
	isgomock struct{}
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// NewVideo mocks base method.
func (m *MockVideoRepository) NewVideo(ctx context.Context, youtube_video *entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVideo", ctx, youtube_video)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewVideo indicates an expected call of NewVideo.
func (mr *MockVideoRepositoryMockRecorder) NewVideo(ctx, youtube_video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVideo", reflect.TypeOf((*MockVideoRepository)(nil).NewVideo), ctx, youtube_video)
}
