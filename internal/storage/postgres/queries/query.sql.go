// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const assignProjectFile = `-- name: AssignProjectFile :exec
INSERT INTO project_file (project_id, file_id) VALUES ((SELECT id FROM project WHERE uuid = $1), $2)
`

type AssignProjectFileParams struct {
	Uuid   string
	FileID int64
}

func (q *Queries) AssignProjectFile(ctx context.Context, arg AssignProjectFileParams) error {
	_, err := q.exec(ctx, q.assignProjectFileStmt, assignProjectFile, arg.Uuid, arg.FileID)
	return err
}

const assignYoutubeDescription = `-- name: AssignYoutubeDescription :exec
INSERT INTO youtube_description (youtube_id, description, description_md5) VALUES ($1, $2, $3)
`

type AssignYoutubeDescriptionParams struct {
	YoutubeID      interface{}
	Description    string
	DescriptionMd5 []byte
}

func (q *Queries) AssignYoutubeDescription(ctx context.Context, arg AssignYoutubeDescriptionParams) error {
	_, err := q.exec(ctx, q.assignYoutubeDescriptionStmt, assignYoutubeDescription, arg.YoutubeID, arg.Description, arg.DescriptionMd5)
	return err
}

const assignYoutubeFileID = `-- name: AssignYoutubeFileID :exec
INSERT INTO youtube_file (youtube_id, file_id) VALUES ($1, $2)
`

type AssignYoutubeFileIDParams struct {
	YoutubeID interface{}
	FileID    int64
}

func (q *Queries) AssignYoutubeFileID(ctx context.Context, arg AssignYoutubeFileIDParams) error {
	_, err := q.exec(ctx, q.assignYoutubeFileIDStmt, assignYoutubeFileID, arg.YoutubeID, arg.FileID)
	return err
}

const assignYoutubeTitle = `-- name: AssignYoutubeTitle :exec
INSERT INTO youtube_title (youtube_id, title, title_md5) VALUES ($1, $2, $3)
`

type AssignYoutubeTitleParams struct {
	YoutubeID interface{}
	Title     string
	TitleMd5  []byte
}

func (q *Queries) AssignYoutubeTitle(ctx context.Context, arg AssignYoutubeTitleParams) error {
	_, err := q.exec(ctx, q.assignYoutubeTitleStmt, assignYoutubeTitle, arg.YoutubeID, arg.Title, arg.TitleMd5)
	return err
}

const deleteFileByID = `-- name: DeleteFileByID :exec
DELETE FROM file WHERE id = $1
`

func (q *Queries) DeleteFileByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteFileByIDStmt, deleteFileByID, id)
	return err
}

const deleteProjectByUUID = `-- name: DeleteProjectByUUID :exec
DELETE FROM project WHERE uuid = $1
`

func (q *Queries) DeleteProjectByUUID(ctx context.Context, uuid string) error {
	_, err := q.exec(ctx, q.deleteProjectByUUIDStmt, deleteProjectByUUID, uuid)
	return err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, path, extension, md5, sha1, sha256, filesize FROM file WHERE id = $1
`

func (q *Queries) GetFileByID(ctx context.Context, id int64) (File, error) {
	row := q.queryRow(ctx, q.getFileByIDStmt, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.Extension,
		&i.Md5,
		&i.Sha1,
		&i.Sha256,
		&i.Filesize,
	)
	return i, err
}

const getProjectByUUID = `-- name: GetProjectByUUID :one
SELECT id, uuid, type, date_announced, date_completed, date_archived FROM project WHERE uuid = $1
`

func (q *Queries) GetProjectByUUID(ctx context.Context, uuid string) (Project, error) {
	row := q.queryRow(ctx, q.getProjectByUUIDStmt, getProjectByUUID, uuid)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.DateAnnounced,
		&i.DateCompleted,
		&i.DateArchived,
	)
	return i, err
}

const getProjectByYoutubeID = `-- name: GetProjectByYoutubeID :one
SELECT project.id, project.uuid, project.type, project.date_announced, project.date_completed, project.date_archived FROM project 
INNER JOIN project_file ON project.id = project_file.project_id
INNER JOIN youtube_file ON project_file.file_id = youtube_file.file_id
WHERE youtube_file.youtube_id = $1
`

func (q *Queries) GetProjectByYoutubeID(ctx context.Context, youtubeID interface{}) (Project, error) {
	row := q.queryRow(ctx, q.getProjectByYoutubeIDStmt, getProjectByYoutubeID, youtubeID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Type,
		&i.DateAnnounced,
		&i.DateCompleted,
		&i.DateArchived,
	)
	return i, err
}

const getProjectFile = `-- name: GetProjectFile :many
SELECT file_id FROM project_file WHERE project_id = (SELECT id FROM project WHERE uuid = $1)
`

func (q *Queries) GetProjectFile(ctx context.Context, uuid string) ([]int64, error) {
	rows, err := q.query(ctx, q.getProjectFileStmt, getProjectFile, uuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectTypeByYoutubeID = `-- name: GetProjectTypeByYoutubeID :one
SELECT project.type FROM project 
INNER JOIN project_file ON project.id = project_file.project_id
INNER JOIN youtube_file ON project_file.file_id = youtube_file.file_id
WHERE youtube_file.youtube_id = $1
`

func (q *Queries) GetProjectTypeByYoutubeID(ctx context.Context, youtubeID interface{}) (Projecttype, error) {
	row := q.queryRow(ctx, q.getProjectTypeByYoutubeIDStmt, getProjectTypeByYoutubeID, youtubeID)
	var type_ Projecttype
	err := row.Scan(&type_)
	return type_, err
}

const getYoutubeChannelByID = `-- name: GetYoutubeChannelByID :one
SELECT 
    youtube_channel_youtube_video.channel_id AS channel_id, 
    youtube_channel_uploader_id.uploader_id AS uploader_id,
    youtube_channel_uploader_name.uploader AS uploader_name 
FROM youtube_channel_youtube_video
    INNER JOIN youtube_channel_uploader_id ON youtube_channel_uploader_id.channel_id = youtube_channel_youtube_video.channel_id
    INNER JOIN youtube_channel_uploader_name ON youtube_channel_uploader_name.channel_id = youtube_channel_youtube_video.channel_id
WHERE youtube_channel_youtube_video.youtube_id = $1 LIMIT 1
`

type GetYoutubeChannelByIDRow struct {
	ChannelID    interface{}
	UploaderID   string
	UploaderName string
}

func (q *Queries) GetYoutubeChannelByID(ctx context.Context, youtubeID interface{}) (GetYoutubeChannelByIDRow, error) {
	row := q.queryRow(ctx, q.getYoutubeChannelByIDStmt, getYoutubeChannelByID, youtubeID)
	var i GetYoutubeChannelByIDRow
	err := row.Scan(&i.ChannelID, &i.UploaderID, &i.UploaderName)
	return i, err
}

const getYoutubeDescription = `-- name: GetYoutubeDescription :many
SELECT description FROM youtube_description WHERE youtube_id = $1
`

func (q *Queries) GetYoutubeDescription(ctx context.Context, youtubeID interface{}) ([]string, error) {
	rows, err := q.query(ctx, q.getYoutubeDescriptionStmt, getYoutubeDescription, youtubeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var description string
		if err := rows.Scan(&description); err != nil {
			return nil, err
		}
		items = append(items, description)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYoutubeFileID = `-- name: GetYoutubeFileID :many
SELECT file_id FROM youtube_file WHERE youtube_id = $1
`

func (q *Queries) GetYoutubeFileID(ctx context.Context, youtubeID interface{}) ([]int64, error) {
	rows, err := q.query(ctx, q.getYoutubeFileIDStmt, getYoutubeFileID, youtubeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYoutubeTitle = `-- name: GetYoutubeTitle :many
SELECT title FROM youtube_title WHERE youtube_id = $1
`

func (q *Queries) GetYoutubeTitle(ctx context.Context, youtubeID interface{}) ([]string, error) {
	rows, err := q.query(ctx, q.getYoutubeTitleStmt, getYoutubeTitle, youtubeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYoutubeVideo = `-- name: GetYoutubeVideo :one
SELECT id, upload_date, duration, view_count, like_count, dislike_count, is_live, is_restricted FROM youtube_video WHERE id = $1
`

func (q *Queries) GetYoutubeVideo(ctx context.Context, id interface{}) (YoutubeVideo, error) {
	row := q.queryRow(ctx, q.getYoutubeVideoStmt, getYoutubeVideo, id)
	var i YoutubeVideo
	err := row.Scan(
		&i.ID,
		&i.UploadDate,
		&i.Duration,
		&i.ViewCount,
		&i.LikeCount,
		&i.DislikeCount,
		&i.IsLive,
		&i.IsRestricted,
	)
	return i, err
}

const getYoutubeVideoFormatByYoutubeID = `-- name: GetYoutubeVideoFormatByYoutubeID :many
SELECT youtube_id, file_id, format_id, format FROM youtube_video_format WHERE youtube_id = $1
`

func (q *Queries) GetYoutubeVideoFormatByYoutubeID(ctx context.Context, youtubeID interface{}) ([]YoutubeVideoFormat, error) {
	rows, err := q.query(ctx, q.getYoutubeVideoFormatByYoutubeIDStmt, getYoutubeVideoFormatByYoutubeID, youtubeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []YoutubeVideoFormat
	for rows.Next() {
		var i YoutubeVideoFormat
		if err := rows.Scan(
			&i.YoutubeID,
			&i.FileID,
			&i.FormatID,
			&i.Format,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYoutubeYtdlpVersion = `-- name: GetYoutubeYtdlpVersion :one
SELECT file_id, youtube_id, repository, release_git_head, version FROM youtube_video_ytdlp_version WHERE youtube_id = $1 AND file_id = $2
`

type GetYoutubeYtdlpVersionParams struct {
	YoutubeID interface{}
	FileID    int64
}

func (q *Queries) GetYoutubeYtdlpVersion(ctx context.Context, arg GetYoutubeYtdlpVersionParams) (YoutubeVideoYtdlpVersion, error) {
	row := q.queryRow(ctx, q.getYoutubeYtdlpVersionStmt, getYoutubeYtdlpVersion, arg.YoutubeID, arg.FileID)
	var i YoutubeVideoYtdlpVersion
	err := row.Scan(
		&i.FileID,
		&i.YoutubeID,
		&i.Repository,
		&i.ReleaseGitHead,
		&i.Version,
	)
	return i, err
}

const newFile = `-- name: NewFile :one
INSERT INTO file (path, extension, md5, sha1, sha256, filesize) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type NewFileParams struct {
	Path      string
	Extension string
	Md5       []byte
	Sha1      []byte
	Sha256    []byte
	Filesize  int64
}

func (q *Queries) NewFile(ctx context.Context, arg NewFileParams) (int64, error) {
	row := q.queryRow(ctx, q.newFileStmt, newFile,
		arg.Path,
		arg.Extension,
		arg.Md5,
		arg.Sha1,
		arg.Sha256,
		arg.Filesize,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const newProject = `-- name: NewProject :one
INSERT INTO project (uuid, type, date_announced, date_completed) VALUES ($1, $2, $3, $4) RETURNING uuid
`

type NewProjectParams struct {
	Uuid          string
	Type          Projecttype
	DateAnnounced sql.NullTime
	DateCompleted sql.NullTime
}

func (q *Queries) NewProject(ctx context.Context, arg NewProjectParams) (string, error) {
	row := q.queryRow(ctx, q.newProjectStmt, newProject,
		arg.Uuid,
		arg.Type,
		arg.DateAnnounced,
		arg.DateCompleted,
	)
	var uuid string
	err := row.Scan(&uuid)
	return uuid, err
}

const newYoutube = `-- name: NewYoutube :exec
INSERT INTO youtube_video (id, upload_date, duration, view_count, like_count, dislike_count, is_live, is_restricted)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type NewYoutubeParams struct {
	ID           interface{}
	UploadDate   time.Time
	Duration     int32
	ViewCount    sql.NullInt32
	LikeCount    sql.NullInt32
	DislikeCount sql.NullInt32
	IsLive       sql.NullBool
	IsRestricted sql.NullBool
}

func (q *Queries) NewYoutube(ctx context.Context, arg NewYoutubeParams) error {
	_, err := q.exec(ctx, q.newYoutubeStmt, newYoutube,
		arg.ID,
		arg.UploadDate,
		arg.Duration,
		arg.ViewCount,
		arg.LikeCount,
		arg.DislikeCount,
		arg.IsLive,
		arg.IsRestricted,
	)
	return err
}

const newYoutubeChannel = `-- name: NewYoutubeChannel :exec
INSERT INTO youtube_channel (id) VALUES ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) NewYoutubeChannel(ctx context.Context, id interface{}) error {
	_, err := q.exec(ctx, q.newYoutubeChannelStmt, newYoutubeChannel, id)
	return err
}

const newYoutubeChannelUploaderID = `-- name: NewYoutubeChannelUploaderID :exec
INSERT INTO youtube_channel_uploader_id (channel_id, uploader_id) VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type NewYoutubeChannelUploaderIDParams struct {
	ChannelID  interface{}
	UploaderID string
}

func (q *Queries) NewYoutubeChannelUploaderID(ctx context.Context, arg NewYoutubeChannelUploaderIDParams) error {
	_, err := q.exec(ctx, q.newYoutubeChannelUploaderIDStmt, newYoutubeChannelUploaderID, arg.ChannelID, arg.UploaderID)
	return err
}

const newYoutubeChannelUploaderName = `-- name: NewYoutubeChannelUploaderName :exec
INSERT INTO youtube_channel_uploader_name (channel_id, uploader) VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type NewYoutubeChannelUploaderNameParams struct {
	ChannelID interface{}
	Uploader  string
}

func (q *Queries) NewYoutubeChannelUploaderName(ctx context.Context, arg NewYoutubeChannelUploaderNameParams) error {
	_, err := q.exec(ctx, q.newYoutubeChannelUploaderNameStmt, newYoutubeChannelUploaderName, arg.ChannelID, arg.Uploader)
	return err
}

const newYoutubeChannelVideo = `-- name: NewYoutubeChannelVideo :exec
INSERT INTO youtube_channel_youtube_video (channel_id, youtube_id) VALUES ($1, $2)
`

type NewYoutubeChannelVideoParams struct {
	ChannelID interface{}
	YoutubeID interface{}
}

func (q *Queries) NewYoutubeChannelVideo(ctx context.Context, arg NewYoutubeChannelVideoParams) error {
	_, err := q.exec(ctx, q.newYoutubeChannelVideoStmt, newYoutubeChannelVideo, arg.ChannelID, arg.YoutubeID)
	return err
}

const newYoutubeFormat = `-- name: NewYoutubeFormat :exec
INSERT INTO youtube_video_format (youtube_id, file_id, format_id, format)
VALUES ($1, $2, $3, $4)
`

type NewYoutubeFormatParams struct {
	YoutubeID interface{}
	FileID    int64
	FormatID  string
	Format    string
}

func (q *Queries) NewYoutubeFormat(ctx context.Context, arg NewYoutubeFormatParams) error {
	_, err := q.exec(ctx, q.newYoutubeFormatStmt, newYoutubeFormat,
		arg.YoutubeID,
		arg.FileID,
		arg.FormatID,
		arg.Format,
	)
	return err
}

const newYoutubeYtdlpVersion = `-- name: NewYoutubeYtdlpVersion :exec
INSERT INTO youtube_video_ytdlp_version ("file_id", "youtube_id", "repository", "release_git_head", "version") VALUES ($1, $2, $3, $4, $5)
`

type NewYoutubeYtdlpVersionParams struct {
	FileID         int64
	YoutubeID      interface{}
	Repository     string
	ReleaseGitHead string
	Version        string
}

func (q *Queries) NewYoutubeYtdlpVersion(ctx context.Context, arg NewYoutubeYtdlpVersionParams) error {
	_, err := q.exec(ctx, q.newYoutubeYtdlpVersionStmt, newYoutubeYtdlpVersion,
		arg.FileID,
		arg.YoutubeID,
		arg.Repository,
		arg.ReleaseGitHead,
		arg.Version,
	)
	return err
}

const unassignProjectFile = `-- name: UnassignProjectFile :exec
DELETE FROM project_file WHERE file_id = $1
`

func (q *Queries) UnassignProjectFile(ctx context.Context, fileID int64) error {
	_, err := q.exec(ctx, q.unassignProjectFileStmt, unassignProjectFile, fileID)
	return err
}
