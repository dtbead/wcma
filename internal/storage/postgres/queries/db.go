// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignProjectFileStmt, err = db.PrepareContext(ctx, assignProjectFile); err != nil {
		return nil, fmt.Errorf("error preparing query AssignProjectFile: %w", err)
	}
	if q.assignYoutubeDescriptionStmt, err = db.PrepareContext(ctx, assignYoutubeDescription); err != nil {
		return nil, fmt.Errorf("error preparing query AssignYoutubeDescription: %w", err)
	}
	if q.assignYoutubeFileIDStmt, err = db.PrepareContext(ctx, assignYoutubeFileID); err != nil {
		return nil, fmt.Errorf("error preparing query AssignYoutubeFileID: %w", err)
	}
	if q.assignYoutubeTitleStmt, err = db.PrepareContext(ctx, assignYoutubeTitle); err != nil {
		return nil, fmt.Errorf("error preparing query AssignYoutubeTitle: %w", err)
	}
	if q.deleteFileByIDStmt, err = db.PrepareContext(ctx, deleteFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFileByID: %w", err)
	}
	if q.deleteProjectByUUIDStmt, err = db.PrepareContext(ctx, deleteProjectByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectByUUID: %w", err)
	}
	if q.getFileByIDStmt, err = db.PrepareContext(ctx, getFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByID: %w", err)
	}
	if q.getProjectByUUIDStmt, err = db.PrepareContext(ctx, getProjectByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectByUUID: %w", err)
	}
	if q.getProjectByYoutubeIDStmt, err = db.PrepareContext(ctx, getProjectByYoutubeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectByYoutubeID: %w", err)
	}
	if q.getProjectFileStmt, err = db.PrepareContext(ctx, getProjectFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectFile: %w", err)
	}
	if q.getProjectTypeByYoutubeIDStmt, err = db.PrepareContext(ctx, getProjectTypeByYoutubeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectTypeByYoutubeID: %w", err)
	}
	if q.getYoutubeChannelByIDStmt, err = db.PrepareContext(ctx, getYoutubeChannelByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeChannelByID: %w", err)
	}
	if q.getYoutubeDescriptionStmt, err = db.PrepareContext(ctx, getYoutubeDescription); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeDescription: %w", err)
	}
	if q.getYoutubeFileIDStmt, err = db.PrepareContext(ctx, getYoutubeFileID); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeFileID: %w", err)
	}
	if q.getYoutubeTitleStmt, err = db.PrepareContext(ctx, getYoutubeTitle); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeTitle: %w", err)
	}
	if q.getYoutubeVideoStmt, err = db.PrepareContext(ctx, getYoutubeVideo); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeVideo: %w", err)
	}
	if q.getYoutubeVideoFormatByYoutubeIDStmt, err = db.PrepareContext(ctx, getYoutubeVideoFormatByYoutubeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeVideoFormatByYoutubeID: %w", err)
	}
	if q.getYoutubeYtdlpVersionStmt, err = db.PrepareContext(ctx, getYoutubeYtdlpVersion); err != nil {
		return nil, fmt.Errorf("error preparing query GetYoutubeYtdlpVersion: %w", err)
	}
	if q.newFileStmt, err = db.PrepareContext(ctx, newFile); err != nil {
		return nil, fmt.Errorf("error preparing query NewFile: %w", err)
	}
	if q.newProjectStmt, err = db.PrepareContext(ctx, newProject); err != nil {
		return nil, fmt.Errorf("error preparing query NewProject: %w", err)
	}
	if q.newYoutubeStmt, err = db.PrepareContext(ctx, newYoutube); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutube: %w", err)
	}
	if q.newYoutubeChannelStmt, err = db.PrepareContext(ctx, newYoutubeChannel); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeChannel: %w", err)
	}
	if q.newYoutubeChannelUploaderIDStmt, err = db.PrepareContext(ctx, newYoutubeChannelUploaderID); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeChannelUploaderID: %w", err)
	}
	if q.newYoutubeChannelUploaderNameStmt, err = db.PrepareContext(ctx, newYoutubeChannelUploaderName); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeChannelUploaderName: %w", err)
	}
	if q.newYoutubeChannelVideoStmt, err = db.PrepareContext(ctx, newYoutubeChannelVideo); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeChannelVideo: %w", err)
	}
	if q.newYoutubeFormatStmt, err = db.PrepareContext(ctx, newYoutubeFormat); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeFormat: %w", err)
	}
	if q.newYoutubeYtdlpVersionStmt, err = db.PrepareContext(ctx, newYoutubeYtdlpVersion); err != nil {
		return nil, fmt.Errorf("error preparing query NewYoutubeYtdlpVersion: %w", err)
	}
	if q.unassignProjectFileStmt, err = db.PrepareContext(ctx, unassignProjectFile); err != nil {
		return nil, fmt.Errorf("error preparing query UnassignProjectFile: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignProjectFileStmt != nil {
		if cerr := q.assignProjectFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignProjectFileStmt: %w", cerr)
		}
	}
	if q.assignYoutubeDescriptionStmt != nil {
		if cerr := q.assignYoutubeDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignYoutubeDescriptionStmt: %w", cerr)
		}
	}
	if q.assignYoutubeFileIDStmt != nil {
		if cerr := q.assignYoutubeFileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignYoutubeFileIDStmt: %w", cerr)
		}
	}
	if q.assignYoutubeTitleStmt != nil {
		if cerr := q.assignYoutubeTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignYoutubeTitleStmt: %w", cerr)
		}
	}
	if q.deleteFileByIDStmt != nil {
		if cerr := q.deleteFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileByIDStmt: %w", cerr)
		}
	}
	if q.deleteProjectByUUIDStmt != nil {
		if cerr := q.deleteProjectByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectByUUIDStmt: %w", cerr)
		}
	}
	if q.getFileByIDStmt != nil {
		if cerr := q.getFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByIDStmt: %w", cerr)
		}
	}
	if q.getProjectByUUIDStmt != nil {
		if cerr := q.getProjectByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectByUUIDStmt: %w", cerr)
		}
	}
	if q.getProjectByYoutubeIDStmt != nil {
		if cerr := q.getProjectByYoutubeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectByYoutubeIDStmt: %w", cerr)
		}
	}
	if q.getProjectFileStmt != nil {
		if cerr := q.getProjectFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectFileStmt: %w", cerr)
		}
	}
	if q.getProjectTypeByYoutubeIDStmt != nil {
		if cerr := q.getProjectTypeByYoutubeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectTypeByYoutubeIDStmt: %w", cerr)
		}
	}
	if q.getYoutubeChannelByIDStmt != nil {
		if cerr := q.getYoutubeChannelByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeChannelByIDStmt: %w", cerr)
		}
	}
	if q.getYoutubeDescriptionStmt != nil {
		if cerr := q.getYoutubeDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeDescriptionStmt: %w", cerr)
		}
	}
	if q.getYoutubeFileIDStmt != nil {
		if cerr := q.getYoutubeFileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeFileIDStmt: %w", cerr)
		}
	}
	if q.getYoutubeTitleStmt != nil {
		if cerr := q.getYoutubeTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeTitleStmt: %w", cerr)
		}
	}
	if q.getYoutubeVideoStmt != nil {
		if cerr := q.getYoutubeVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeVideoStmt: %w", cerr)
		}
	}
	if q.getYoutubeVideoFormatByYoutubeIDStmt != nil {
		if cerr := q.getYoutubeVideoFormatByYoutubeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeVideoFormatByYoutubeIDStmt: %w", cerr)
		}
	}
	if q.getYoutubeYtdlpVersionStmt != nil {
		if cerr := q.getYoutubeYtdlpVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getYoutubeYtdlpVersionStmt: %w", cerr)
		}
	}
	if q.newFileStmt != nil {
		if cerr := q.newFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newFileStmt: %w", cerr)
		}
	}
	if q.newProjectStmt != nil {
		if cerr := q.newProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newProjectStmt: %w", cerr)
		}
	}
	if q.newYoutubeStmt != nil {
		if cerr := q.newYoutubeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeStmt: %w", cerr)
		}
	}
	if q.newYoutubeChannelStmt != nil {
		if cerr := q.newYoutubeChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeChannelStmt: %w", cerr)
		}
	}
	if q.newYoutubeChannelUploaderIDStmt != nil {
		if cerr := q.newYoutubeChannelUploaderIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeChannelUploaderIDStmt: %w", cerr)
		}
	}
	if q.newYoutubeChannelUploaderNameStmt != nil {
		if cerr := q.newYoutubeChannelUploaderNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeChannelUploaderNameStmt: %w", cerr)
		}
	}
	if q.newYoutubeChannelVideoStmt != nil {
		if cerr := q.newYoutubeChannelVideoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeChannelVideoStmt: %w", cerr)
		}
	}
	if q.newYoutubeFormatStmt != nil {
		if cerr := q.newYoutubeFormatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeFormatStmt: %w", cerr)
		}
	}
	if q.newYoutubeYtdlpVersionStmt != nil {
		if cerr := q.newYoutubeYtdlpVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newYoutubeYtdlpVersionStmt: %w", cerr)
		}
	}
	if q.unassignProjectFileStmt != nil {
		if cerr := q.unassignProjectFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unassignProjectFileStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	assignProjectFileStmt                *sql.Stmt
	assignYoutubeDescriptionStmt         *sql.Stmt
	assignYoutubeFileIDStmt              *sql.Stmt
	assignYoutubeTitleStmt               *sql.Stmt
	deleteFileByIDStmt                   *sql.Stmt
	deleteProjectByUUIDStmt              *sql.Stmt
	getFileByIDStmt                      *sql.Stmt
	getProjectByUUIDStmt                 *sql.Stmt
	getProjectByYoutubeIDStmt            *sql.Stmt
	getProjectFileStmt                   *sql.Stmt
	getProjectTypeByYoutubeIDStmt        *sql.Stmt
	getYoutubeChannelByIDStmt            *sql.Stmt
	getYoutubeDescriptionStmt            *sql.Stmt
	getYoutubeFileIDStmt                 *sql.Stmt
	getYoutubeTitleStmt                  *sql.Stmt
	getYoutubeVideoStmt                  *sql.Stmt
	getYoutubeVideoFormatByYoutubeIDStmt *sql.Stmt
	getYoutubeYtdlpVersionStmt           *sql.Stmt
	newFileStmt                          *sql.Stmt
	newProjectStmt                       *sql.Stmt
	newYoutubeStmt                       *sql.Stmt
	newYoutubeChannelStmt                *sql.Stmt
	newYoutubeChannelUploaderIDStmt      *sql.Stmt
	newYoutubeChannelUploaderNameStmt    *sql.Stmt
	newYoutubeChannelVideoStmt           *sql.Stmt
	newYoutubeFormatStmt                 *sql.Stmt
	newYoutubeYtdlpVersionStmt           *sql.Stmt
	unassignProjectFileStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		assignProjectFileStmt:                q.assignProjectFileStmt,
		assignYoutubeDescriptionStmt:         q.assignYoutubeDescriptionStmt,
		assignYoutubeFileIDStmt:              q.assignYoutubeFileIDStmt,
		assignYoutubeTitleStmt:               q.assignYoutubeTitleStmt,
		deleteFileByIDStmt:                   q.deleteFileByIDStmt,
		deleteProjectByUUIDStmt:              q.deleteProjectByUUIDStmt,
		getFileByIDStmt:                      q.getFileByIDStmt,
		getProjectByUUIDStmt:                 q.getProjectByUUIDStmt,
		getProjectByYoutubeIDStmt:            q.getProjectByYoutubeIDStmt,
		getProjectFileStmt:                   q.getProjectFileStmt,
		getProjectTypeByYoutubeIDStmt:        q.getProjectTypeByYoutubeIDStmt,
		getYoutubeChannelByIDStmt:            q.getYoutubeChannelByIDStmt,
		getYoutubeDescriptionStmt:            q.getYoutubeDescriptionStmt,
		getYoutubeFileIDStmt:                 q.getYoutubeFileIDStmt,
		getYoutubeTitleStmt:                  q.getYoutubeTitleStmt,
		getYoutubeVideoStmt:                  q.getYoutubeVideoStmt,
		getYoutubeVideoFormatByYoutubeIDStmt: q.getYoutubeVideoFormatByYoutubeIDStmt,
		getYoutubeYtdlpVersionStmt:           q.getYoutubeYtdlpVersionStmt,
		newFileStmt:                          q.newFileStmt,
		newProjectStmt:                       q.newProjectStmt,
		newYoutubeStmt:                       q.newYoutubeStmt,
		newYoutubeChannelStmt:                q.newYoutubeChannelStmt,
		newYoutubeChannelUploaderIDStmt:      q.newYoutubeChannelUploaderIDStmt,
		newYoutubeChannelUploaderNameStmt:    q.newYoutubeChannelUploaderNameStmt,
		newYoutubeChannelVideoStmt:           q.newYoutubeChannelVideoStmt,
		newYoutubeFormatStmt:                 q.newYoutubeFormatStmt,
		newYoutubeYtdlpVersionStmt:           q.newYoutubeYtdlpVersionStmt,
		unassignProjectFileStmt:              q.unassignProjectFileStmt,
	}
}
