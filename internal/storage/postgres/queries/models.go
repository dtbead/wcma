// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/dtbead/wc-maps-archive/internal/entities"
)

type Projecttype string

const (
	ProjecttypeUnknown            Projecttype = "unknown"
	ProjecttypeOther              Projecttype = "other"
	ProjecttypeMultiAnimation     Projecttype = "multi-animation"
	ProjecttypeMultiAnimationpart Projecttype = "multi-animation part"
	ProjecttypeMultiEdit          Projecttype = "multi-edit"
	ProjecttypeMultiEditpart      Projecttype = "multi-edit part"
	ProjecttypeAnimatedmusicvideo Projecttype = "animated music video"
	ProjecttypePicturemusicvideo  Projecttype = "picture music video"
	ProjecttypeAnimationmeme      Projecttype = "animation meme"
)

func (e *Projecttype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Projecttype(s)
	case string:
		*e = Projecttype(s)
	default:
		return fmt.Errorf("unsupported scan type for Projecttype: %T", src)
	}
	return nil
}

type NullProjecttype struct {
	Projecttype Projecttype
	Valid       bool // Valid is true if Projecttype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjecttype) Scan(value interface{}) error {
	if value == nil {
		ns.Projecttype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Projecttype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjecttype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Projecttype), nil
}

type Character struct {
	ID         int32
	Name       string
	Series     string
	IsOriginal bool
}

type File struct {
	ID        int64
	Path      string
	Extension string
	Md5       []byte
	Sha1      []byte
	Sha256    []byte
	Filesize  int64
}

type FileVideo struct {
	FileID     int64
	Duration   int32
	Width      int16
	Height     int16
	Fps        sql.NullInt16
	VideoCodec sql.NullString
	AudioCodec sql.NullString
}

type Music struct {
	ID     int32
	Artist string
	Title  string
}

type Project struct {
	ID            int64
	Uuid          string
	Type          Projecttype
	DateAnnounced sql.NullTime
	DateCompleted sql.NullTime
	DateArchived  time.Time
}

type ProjectCharacter struct {
	ProjectID   int32
	CharacterID int32
}

type ProjectDescription struct {
	ProjectID      int64
	Description    string
	DescriptionMd5 []byte
	DateAdded      time.Time
}

type ProjectFile struct {
	ProjectID int64
	FileID    int64
}

type ProjectMusic struct {
	ProjectID int32
	MusicID   int32
}

type ProjectParticipant struct {
	ProjectID int32
	FileID    int64
}

type ProjectTitle struct {
	ProjectID int64
	Title     string
	TitleMd5  []byte
	DateAdded time.Time
}

type YoutubeChannel struct {
	ID interface{}
}

type YoutubeChannelUploaderID struct {
	ChannelID  interface{}
	UploaderID string
}

type YoutubeChannelUploaderName struct {
	ChannelID interface{}
	Uploader  string
}

type YoutubeChannelYoutubeVideo struct {
	ChannelID interface{}
	YoutubeID entities.YoutubeVideoID
}

type YoutubeDescription struct {
	YoutubeID      interface{}
	Description    string
	DescriptionMd5 []byte
	DateAdded      time.Time
}

type YoutubeFile struct {
	YoutubeID interface{}
	FileID    int64
}

type YoutubeTitle struct {
	YoutubeID interface{}
	Title     string
	TitleMd5  []byte
	DateAdded time.Time
}

type YoutubeVideo struct {
	ID           interface{}
	UploadDate   time.Time
	Duration     int32
	ViewCount    sql.NullInt32
	LikeCount    sql.NullInt32
	DislikeCount sql.NullInt32
	IsLive       sql.NullBool
	IsRestricted sql.NullBool
}

type YoutubeVideoFormat struct {
	YoutubeID interface{}
	FileID    int64
	FormatID  string
	Format    string
}

type YoutubeVideoYtdlpVersion struct {
	FileID         int64
	YoutubeID      interface{}
	Repository     string
	ReleaseGitHead string
	Version        string
}
